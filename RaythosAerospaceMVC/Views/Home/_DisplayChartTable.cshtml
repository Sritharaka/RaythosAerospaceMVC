<!-- Report.cshtml -->
@using RaythosAerospaceMVC.Repository
@model ReportViewModel




@{
    ViewData["Title"] = "Report Page";
}

<!DOCTYPE html>
<html>
<head>
    <title>Aircraft Page</title>
    <!-- Bootstrap CSS (from CDN) -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" integrity="..." crossorigin="anonymous">

    <!-- Bootstrap Icons (from CDN) -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css" rel="stylesheet">


    <!-- Toastr CSS -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css" rel="stylesheet">
    <!-- jQuery -->
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <!-- Toastr JS -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js"></script>

    <!-- Add jQuery -->
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <!-- Add html2canvas library -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/html2canvas/0.5.0-beta4/html2canvas.min.js"></script>
    <!-- Add jsPDF library -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.4.0/jspdf.umd.min.js"></script>



    <!-- Add html2canvas library -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/html2canvas/0.5.0-beta4/html2canvas.min.js"></script>
    <!-- Add jsPDF library -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.4.0/jspdf.umd.min.js"></script>
    <!-- Add pdfmake library -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.1.70/pdfmake.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.1.70/vfs_fonts.js"></script>
    <script src="~/js/jspdf.min.js"></script>

    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/html2pdf.js/0.9.3/html2pdf.bundle.min.js"></script>


    <style>
        .chartCanvas {
            width: 900px;
            height: 600px;
            border-radius: 15px; /* Example border-radius */
        }
    </style>



</head>
<body>

    <div style="margin-left: 40px; margin-top: 40px; width: 1150px;">

@*        <h3 style="margin-bottom: 20px;">Common Reports</h3>
*@
        <canvas id="tableCounts" class="chartCanvas" style="margin-top: 40px; margin-bottom:40px;"></canvas>
    </div>

  @*  <div style="margin-left: 40px; margin-top: 60px; width: 1150px;">

        <h4 style="margin-bottom: 20px;">Custom Reports</h4>



        <form asp-action="GenerateReport" method="post" enctype="multipart/form-data" id="subMitId">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>

            <div class="row">
                <div class="col-lg-4">
                    <div class="form-group">
                        <label>Select Report</label>
                        <select class="form-control" id="tableSelect" name="tableSelect">
                            <option value="" selected>Select Report</option>
                            <option value="Payments">Payments</option>
                            <option value="Inventory">Inventory</option>
                            <option value="Aircrafts">Aircrafts</option>
                            <option value="Users">Users</option>
                            <option value="ManufacturingProgresses">Manufacturing Progresses</option>
                        </select>
                        <span class="text-danger"></span>
                    </div>
                </div>
                <div class="col-lg-4">
                    <div class="form-group">
                        <label>From Date</label>
                        <input type="date" class="form-control" id="fromDate" name="fromDate">
                    </div>
                </div>
                <div class="col-lg-4">
                    <div class="form-group">
                        <label>To Date</label>
                        <input type="date" class="form-control" id="toDate" name="toDate">
                    </div>
                </div>
            </div>




            <!-- Include other input fields for the remaining properties -->

            <div class="form-group" style="margin-top:40px">
        

                <button type="button" id="updateAircraft" class="btn btn-primary" style="margin-right:30px;">
                    <i class="bi bi-file-earmark-bar-graph"></i> Generate Report
                </button>


                <button type="button" id="reset" class="btn btn-danger" onclick="resetForm()" style="margin-right:30px;">
                    <i class="bi bi-x-circle"></i> Reset
                </button>

                <button type="button" id="downloadPDF" class="btn btn-success" style="margin-right:30px;">
                    <i class="bi bi-cloud-arrow-down"></i> Download Report
                </button>

                <button type="button" onclick="downloadChartAsPDF()" class="btn btn-info">
                    <i class="bi bi-bar-chart-fill"></i> Download Chart
                </button>



            </div>
        </form>



    </div>*@



    <!-- Include the partial view -->
    <!-- Container to load partial view -->
    <div id="tableData">
        @*    @Html.Partial("TablePartial", Model.Payments) <!-- Initial table -->
        *@
    </div>

    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script>
        // Wait for the document to be ready
        $(document).ready(function () {
            // Event listener for the dropdown change
            $('#tableSelect').change(function () {
                var selectedTable = $(this).val();
                // AJAX request to load the partial view based on the selected table
                $.ajax({
                    url: '@Url.Action("TablePartial", "Report")',
                    data: { tableName: selectedTable },
                    type: 'GET', // Assuming you're using HTTP GET method
                    success: function (result) {
                        $('#tableData').html(result); // Update the container with partial view content
                    },
                    error: function () {
                        console.error('Error loading partial view');
                    }
                });
            });
        });

        //$('#updateAircraft').hide();

        // Function to validate all fields and return if they are valid
        function validateFields() {
            var isValid = true;

            // Array of field IDs to validate
            var fieldIds = [
                'tableSelect', 'fromDate', 'toDate'
                // Add other field IDs to be validated
            ];

            // Loop through each field ID to perform validation
            fieldIds.forEach(function (fieldId) {
                var fieldValue = $('#' + fieldId).val().trim();

                if (fieldValue === '') {
                    $('#' + fieldId).addClass('border border-danger'); // Apply red border for empty fields
                    isValid = false;
                } else {
                    $('#' + fieldId).removeClass('border border-danger'); // Remove red border for valid fields
                }
            });

            return isValid;
        }

        // Function to validate fields and add red border if empty on field blur
        function validateFieldsRealTime(fieldId) {
            $('#' + fieldId).on('blur', function () {
                var fieldValue = $(this).val().trim();

                if (fieldValue === '') {
                    $(this).addClass('border border-danger'); // Apply red border for empty fields on blur
                } else {
                    $(this).removeClass('border border-danger'); // Remove red border for valid fields on blur
                }
            });
        }

        // Attach blur event listeners to the fields for real-time validation
        $(document).ready(function () {
            // Array of field IDs to validate on blur
            var fieldIds = [
                'tableSelect', 'fromDate', 'toDate'

                // Add other field IDs to be validated on blur
            ];

            // Loop through each field ID to attach blur event listeners
            fieldIds.forEach(function (fieldId) {
                validateFieldsRealTime(fieldId); // Attach blur event listener to each field
            });

            // Event listener for clicking the submitAircraft button
            $('#submitAircraft').click(function (event) {
                // Prevent the default form submission behavior initially
                event.preventDefault();

                // Validate fields before submitting the form
                if (validateFields()) {
                    // If fields are valid, allow the form submission
                    $('#subMitId').submit(); // Submit the form with valid data
                } else {
                    // Fields are not valid, display an error message or perform necessary action
                    alert('Please fill all required fields with valid data.');
                }
            });

            // ... (Other parts of your existing JavaScript code)
        });


        //// Function to handle update action
        //function updateAircraft(aircraftId) {
        //    // AJAX request to call the Aircraft.cshtml file with the Id parameter
        //    $.ajax({
        //        url: '/Aircraft/Details', // Replace with the appropriate URL for your Aircraft.cshtml file
        //        type: 'GET',
        //        data: { id: aircraftId }, // Pass the Id as a parameter
        //        success: function (response) {
        //            // Handle the response as needed (e.g., display the Aircraft.cshtml content)
        //            // For example, you can load the response content into a div
        //            $('#displayAircraftDetails').html(response);
        //        },
        //        error: function () {
        //            console.error('Error loading aircraft details');
        //        }
        //    });
        //}
        var aircraftId = null;
        //// Click event for the Update button
        $(document).on('click', '.editBtn', function () {
            //aircraftId = $(this).data('id');
            //updateAircraft(aircraftId); // Call the function passing the aircraftId

        });

        $(document).ready(function () {
            // Event listener for clicking the updateAircraft button
            $('#updateAircraft').click(function () {
                // Validate fields before updating
                if (validateFields()) {
                    // If fields are valid, construct the data object
                    var aircraftData = {
                        //ModelName: $('#ModelName').val(),
                        //Manufacturer: $('#Manufacturer').val(),
                        //Description: $('#Description').val(),
                        //SeatingType: $('#SeatingType').val(),
                        //InteriorDesign: $('#InteriorDesign').val(),
                        //uploadedImage: $('#uploadedImage').val(),
                        //BasePrice: $('#BasePrice').val(),
                        //EngineType: $('#EngineType').val(),
                        //MaximumSpeed: $('#MaximumSpeed').val(),
                        //SeatingCapacity: $('#SeatingCapacity').val(),
                        //FuelCapacity: $('#FuelCapacity').val(),
                        //Weight: $('#Weight').val(),
                        tableSelect: $('#tableSelect').val(),
                        fromDate: $('#fromDate').val(),
                        toDate: $('#toDate').val(),
                        //Id: aircraftId



                        // Get other field values in a similar way
                    };

                    var tableSelectName = $('#tableSelect').val();
                    var fromDate = $('#tableSfromDateelect').val();
                    var toDate = $('#toDate').val();

                    //var aircraftId = $('#Id').val();
                    console.log(aircraftId)
                    // Perform update action with the constructed aircraftData object
                    // You can make an AJAX request or call a function to update the data here
                    updateAircraftData(aircraftData, tableSelectName, fromDate, toDate);
                } else {
                    // Fields are not valid, display an error message or perform necessary action
                    alert('Please fill all required fields with valid data.');
                }
            });

            // Function to validate fields
            //function validateFields() {
            //    var isValid = true;

            //    // Validate ModelName field
            //    if ($('#ModelName').val() === '') {
            //        isValid = false;
            //        $('#ModelName').addClass('border-danger'); // Apply error styling
            //    } else {
            //        $('#ModelName').removeClass('border-danger'); // Remove error styling if field is valid
            //    }

            //    // Validate ModelName field
            //    if ($('#Manufacturer').val() === '') {
            //        isValid = false;
            //        $('#Manufacturer').addClass('border-danger'); // Apply error styling
            //    } else {
            //        $('#Manufacturer').removeClass('border-danger'); // Remove error styling if field is valid
            //    }

            //    // Validate ModelName field
            //    if ($('#Description').val() === '') {
            //        isValid = false;
            //        $('#Description').addClass('border-danger'); // Apply error styling
            //    } else {
            //        $('#Description').removeClass('border-danger'); // Remove error styling if field is valid
            //    }

            //    // Validate ModelName field
            //    if ($('#SeatingType').val() === '') {
            //        isValid = false;
            //        $('#SeatingType').addClass('border-danger'); // Apply error styling
            //    } else {
            //        $('#SeatingType').removeClass('border-danger'); // Remove error styling if field is valid
            //    }
            //    // Validate ModelName field
            //    if ($('#InteriorDesign').val() === '') {
            //        isValid = false;
            //        $('#InteriorDesign').addClass('border-danger'); // Apply error styling
            //    } else {
            //        $('#InteriorDesign').removeClass('border-danger'); // Remove error styling if field is valid
            //    }

            //    // Validate ModelName field
            //    if ($('#ImageUrl').val() === '') {
            //        isValid = false;
            //        $('#ImageUrl').addClass('border-danger'); // Apply error styling
            //    } else {
            //        $('#ImageUrl').removeClass('border-danger'); // Remove error styling if field is valid
            //    }

            //    // Validate ModelName field
            //    if ($('#BasePrice').val() === '') {
            //        isValid = false;
            //        $('#BasePrice').addClass('border-danger'); // Apply error styling
            //    } else {
            //        $('#BasePrice').removeClass('border-danger'); // Remove error styling if field is valid
            //    }

            //    // Validate ModelName field
            //    if ($('#EngineType').val() === '') {
            //        isValid = false;
            //        $('#EngineType').addClass('border-danger'); // Apply error styling
            //    } else {
            //        $('#EngineType').removeClass('border-danger'); // Remove error styling if field is valid
            //    }

            //    // Validate ModelName field
            //    if ($('#MaximumSpeed').val() === '') {
            //        isValid = false;
            //        $('#MaximumSpeed').addClass('border-danger'); // Apply error styling
            //    } else {
            //        $('#MaximumSpeed').removeClass('border-danger'); // Remove error styling if field is valid
            //    }

            //    // Validate ModelName field
            //    if ($('#SeatingCapacity').val() === '') {
            //        isValid = false;
            //        $('#SeatingCapacity').addClass('border-danger'); // Apply error styling
            //    } else {
            //        $('#SeatingCapacity').removeClass('border-danger'); // Remove error styling if field is valid
            //    }

            //    // Validate ModelName field
            //    if ($('#FuelCapacity').val() === '') {
            //        isValid = false;
            //        $('#FuelCapacity').addClass('border-danger'); // Apply error styling
            //    } else {
            //        $('#FuelCapacity').removeClass('border-danger'); // Remove error styling if field is valid
            //    }

            //    // Validate ModelName field
            //    if ($('#Weight').val() === '') {
            //        isValid = false;
            //        $('#Weight').addClass('border-danger'); // Apply error styling
            //    } else {
            //        $('#Weight').removeClass('border-danger'); // Remove error styling if field is valid
            //    }
            //    // Validate other fields in a similar way

            //    return isValid;
            //}

            // Function to update the aircraft data
            function updateAircraftData(data, aircraftId) {
                // Perform the update action here using the 'data' object
                // For example, make an AJAX request to update the data on the server
                var Url = '/Report/GenerateReport/';

                var formData = new FormData();

                // Append non-file fields to FormData
                for (var key in data) {
                    formData.append(key, data[key]);
                }

                // Append file (IFormFile) to FormData
                //var fileInput = document.getElementById('uploadedImage'); // Replace 'uploadedImage' with your file input's ID
                //var file = fileInput.files[0]; // Get the first file from the input

                //formData.append('uploadedImage', file);

                $.ajax({
                    url: Url, // Replace with your endpoint for updating aircraft
                    type: 'POST',
                    headers: {
                        RequestVerificationToken: $('input:hidden[name="__RequestVerificationToken"]').val()
                        // Adjust the selector based on your specific anti-forgery token input
                    },
                    data: formData,
                    processData: false, // Don't process the FormData
                    contentType: false, // Set content type to false for file uploads
                    success: function (response) {
                        $('#tableData').html(response); // Update the container with partial view content
                        // Handle success response after updating data
                        console.log('Aircraft data updated successfully.');
                        //$('#submitAircraft').show();
                        //$('#updateAircraft').hide();

                        //toastr.success('Aircraft data updated successfully.', 'Success', {
                        //    closeButton: true,
                        //    progressBar: true,
                        //    timeOut: 50000 // Time duration the toast will be displayed (in milliseconds)
                        //});

                        // Delay the reload slightly to allow users to see the toast
                        //setTimeout(function () {
                        //    location.reload(); // Reload the page after 2 seconds
                        //}, 3000); // Adjust the delay time as needed



                    },
                    error: function (xhr, status, error) {
                        console.error('Error updating aircraft data:', error);
                        // Handle error response
                    }
                });
            }

            // ... Other code and event listeners
        });











    </script>




    @*    <script>
    // Function to trigger the browser print functionality to save as PDF
    $('#downloadPDF').click(function () {
    // Open a new window with the content to be printed
    var printWindow = window.open('', '_blank');

    // Add the HTML content to the new window
    printWindow.document.write(document.getElementById('tableData').innerHTML);

    // Wait for the content to be loaded
    printWindow.document.addEventListener('DOMContentLoaded', function () {
    // Trigger the browser print dialog
    printWindow.print();
    });
    });
    </script>*@

    <!-- Example: Reference to jspdf.min.js -->


    <script>

        //$('#downloadPDF').click(function () {
        //    // Get the HTML content of the tableData div
        //    var element = document.getElementById('tableData');

        //    // Use html2canvas to capture the HTML content as an image
        //    html2canvas(element).then(function (canvas) {
        //        var imgData = canvas.toDataURL('image/png');

        //        // Create a PDF document using jsPDF
        //        var pdf = new jsPDF('p', 'pt', 'a4');
        //        var imgWidth = 210;
        //        var pageHeight = 295;
        //        var imgHeight = canvas.height * imgWidth / canvas.width;
        //        var heightLeft = imgHeight;

        //        var position = 0;

        //        // Add image to PDF
        //        pdf.addImage(imgData, 'PNG', 0, position, imgWidth, imgHeight);
        //        heightLeft -= pageHeight;

        //        // Add additional pages if the content exceeds one page
        //        while (heightLeft >= 0) {
        //            position = heightLeft - imgHeight;
        //            pdf.addPage();
        //            pdf.addImage(imgData, 'PNG', 0, position, imgWidth, imgHeight);
        //            heightLeft -= pageHeight;
        //        }

        //        // Download the PDF
        //        pdf.save('table.pdf');
        //    });
        //});

        // Event listener for the download PDF button click
        // Event listener for the download PDF button click
        document.getElementById('downloadPDF').addEventListener('click', function () {
            // Get the HTML content from #tableData
            var element = document.getElementById('tableData');

            // Get the inner HTML content of the element
            var content = element.innerHTML;

            // Define the PDF document structure
            var docDefinition = {
                content: [
                    { text: 'Generated PDF from HTML', style: 'header' },
                    { text: content, style: 'table' }
                ],
                styles: {
                    header: { fontSize: 18, bold: true },
                    table: { margin: [0, 20, 0, 20] }
                }
            };

            // Create and download the PDF
            pdfMake.createPdf(docDefinition).download('table.pdf');
        });


    </script>

    <script>
        function resetForm() {
            document.getElementById('tableSelect').value = '';
            document.getElementById('fromDate').value = '';
            document.getElementById('toDate').value = '';
            $('#tableData').html(''); // Update the container with partial view content

        }
    </script>

    <script>
        // Retrieving data from the Model for all tables
        var paymentsData = @Html.Raw(Json.Serialize(Model.Payments));
        var inventoryData = @Html.Raw(Json.Serialize(Model.Inventory));
        var aircraftsData = @Html.Raw(Json.Serialize(Model.Aircrafts));
        var usersData = @Html.Raw(Json.Serialize(Model.Users));
        var manufacturingProgressData = @Html.Raw(Json.Serialize(Model.ManufacturingProgresses));

        // Get counts from each table data
        var paymentsCount = paymentsData.length;
        var inventoryCount = inventoryData.length;
        var aircraftsCount = aircraftsData.length;
        var usersCount = usersData.length;
        var manufacturingProgressCount = manufacturingProgressData.length;

        // Display the counts
        console.log('Payments Count:', paymentsCount);
        console.log('Inventory Count:', inventoryCount);
        console.log('Aircrafts Count:', aircraftsCount);
        console.log('Users Count:', usersCount);
        console.log('Manufacturing Progress Count:', manufacturingProgressCount);

        // Creating labels and counts for chart
        var labels = ['Payments', 'Inventory', 'Aircrafts', 'Users'];
        var counts = [paymentsCount, inventoryCount, aircraftsCount, usersCount];

        var ctx = document.getElementById('tableCounts').getContext('2d');

        var tableCountsChart = new Chart(ctx, {
            type: 'bar',
            data: {
                labels: labels,
                datasets: [{
                    label: 'Record Counts',
                    data: counts,
                    backgroundColor: [
                        'rgba(255, 99, 132, 0.2)',
                        'rgba(54, 162, 235, 0.2)',
                        'rgba(255, 206, 86, 0.2)',
                        'rgba(75, 192, 192, 0.2)',
                        //'rgba(153, 102, 255, 0.2)'
                    ],
                    borderColor: [
                        'rgba(255, 99, 132, 1)',
                        'rgba(54, 162, 235, 1)',
                        'rgba(255, 206, 86, 1)',
                        'rgba(75, 192, 192, 1)',
                        //'rgba(153, 102, 255, 1)'
                    ],
                    borderWidth: 1
                }]
            },
            options: {
                scales: {
                    y: {
                        beginAtZero: true
                    }
                }
            }
        });

        function downloadChartAsPDF() {
            const chartCanvas = document.getElementById('tableCounts');

            // Get chart canvas as image data URL
            const chartDataURL = chartCanvas.toDataURL('image/png');

            // Set options for PDF generation
            const pdfOptions = {
                margin: 10,
                filename: 'chart.pdf',
                image: { type: 'png', data: chartDataURL },
                html2canvas: { scale: 2 },
                jsPDF: { unit: 'mm', format: 'a4', orientation: 'landscape' }
            };

            // Generate PDF from chart canvas
            html2pdf().from(chartCanvas).set(pdfOptions).save();
        }

    </script>



    <!-- Bootstrap Scripts (from CDN) -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js" integrity="..." crossorigin="anonymous"></script>

    @section Scripts {
        @{
            await Html.RenderPartialAsync("_ValidationScriptsPartial");
        }
    }

</body>
</html>

